"use strict";(self.webpackChunkn2_utility=self.webpackChunkn2_utility||[]).push([[30617],{30617:(a,e,t)=>{t.r(e),t.d(e,{default:()=>d});var r=t(50076),i=t(53430),s=t(4414),n=t(28383),l=t(42633),u=t(11563);const m=i.numericTypes;async function d(a){const{layerAdapter:e,...t}=await async function(a){if(!a?.layer||!a.view)throw new r.default("heatmap-statistics:missing-parameters","'layer' and 'view' parameters are required");const e=[u.mb.CSVLayer,u.mb.FeatureLayer,u.mb.GeoJSONLayer,u.mb.KnowledgeGraphSublayer,u.mb.OGCFeatureLayer,u.mb.OrientedImageryLayer,u.mb.ParquetLayer,u.mb.StreamLayer,u.mb.WFSLayer],{layer:t,...i}=a,d=(0,u.Jg)(t,e);if(!d)throw new r.default("heatmap-statistics:invalid-parameters","'layer' must be one of these types: "+(0,u.Ho)(e).join(", "));const y={layerAdapter:d,...i};y.radius=null==y.radius?null==y.blurRadius?18:(0,s.zp)(y.blurRadius):y.radius;const c=null!=y.signal?{signal:y.signal}:null;await d.load(c);const o=y.field,p=o?d.getField(o):null,b=await(0,l.EG)({field:o}),f=(0,n.MH)(d,b,"heatmap-statistics:invalid-parameters");if(f)throw f;if(p){const a=(0,n.a)(d,p,"heatmap-statistics:invalid-parameters",m);if(a)throw a}return y}(a);return e.heatmapStatistics(t)}}}]);
//# sourceMappingURL=30617.ed73b486.chunk.js.map